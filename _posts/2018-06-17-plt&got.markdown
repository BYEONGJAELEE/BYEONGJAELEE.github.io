---
layout: post
title:  "[Android] PLT & GOT"
date:   2018-06-17 17:47:25 +0900
categories: Android 
---

### 개요
  - 이번 문서에서는 Android에서 사용되는 PLT와 GOT의 역할에 대해 알아보고자 한다.

  - PLT와 GOT는 아래의 그림처럼 Dynamic Linking 방식으로 컴파일 된 파일에서 사용되는 Table이다.

    ![image](https://user-images.githubusercontent.com/12456375/41200613-f22f6dfa-6ce2-11e8-8ac4-88c73a5ef8d3.png) 






### Static Linking & Dynamic Linking 
1. Static Linking
   - 파일 생성 시 라이브러리 내용을 포함해서 컴파일.
2. Dynamic Linking
   - 파일 생성 시 공유된 라이브러리에 연결하도록 컴파일.





### PLT (Procedure Linkage Table)

* PLT는 공유되는 외부 라이브러리를 참조할 때 사용하는 테이블이다.
* PLT에는 간접 분기문 코드가 포함되어 있어서 함수의 메모리 주소를 찾아갈 수 있다. 
* Symbol을 출력해보면, 외부 라이브러리 참조하는 함수명과 사용자가 만든 함수명이 다른 것을 확인할 수 있다.




### GOT(Global Offset Table)

- GOT는 PLT가 참조하는 테이블이다.




### PLT&GOT를 사용한 함수 호출 과정 (최초 함수 호출 과정)

![image](https://user-images.githubusercontent.com/12456375/41505996-53518cb4-7204-11e8-9756-284ed8b1369a.png)

1. plt에서 간접 분기 코드 수행
2. got에서 _dl_runtime_resolve를 실행하며 dynamic linker에 삽입
3. 호출하는 함수의 현재 메모리 위치를 탐색
4. 호출하는 함수의 메모리 위치를 got에 기록
5. 호출하는 함수 호출 





### PLT&GOT를 사용한 함수 호출 과정 (2번째 함수 호출 과정)

![image](https://user-images.githubusercontent.com/12456375/41506006-8765efa4-7204-11e8-9a1d-40fe3d20d128.png)

1. plt에서 간접 분기문 코드가 실행되어 got로 이동
2. got에 저장된 실제 함수 주소로 이동
3. 실제 함수 호출 





  @ 포스팅 내용 참고 주소
  - http://shayete.tistory.com/entry/4-Return-to-Library-RTL (정리가 잘 되어 있는 게시물입니다.)


  @ 위 내용은 다른 개발자분들의 블로그를 참고하여 정리한 내용입니다. 
  혹시나 원본 정보의 출처를 누락되었거나 제 블로그에 게시되길 원치 않으시면 아래 메일로 연락 부탁드리겠습니다.
  littleprince0717@gmail.com 