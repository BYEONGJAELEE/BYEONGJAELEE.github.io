---
layout: post
title:  "[Android] PLT & GOT"
date:   2018-06-17 17:47:25 +0900
categories: Android 
---

### 개요
  - 이번 문서에서는 Android에서 사용되는 PLT와 GOT의 역할에 대해 알아보고자 한다.

  - PLT와 GOT는 Dynamic Linking 방식으로 컴파일 된 파일에서 사용되는 Table이다.

    ---

    * Linking이란 ?
        * 따로 따로 작성한 몇 가지의 목적 프로그램 또는 목적 모듈을 결합하여 하나의 목적 프로그램(로드 모듈)으로 만드는 것을 링킹(linking)이라 한다.  

      - Dynamic Linking 이란 ?
          - 

---

### Linking ?

따로 따로 작성한 몇 가지의 목적 프로그램 또는 목적 모듈을 결합하여 하나의 목적 프로그램(로드 모듈)으로 만드는 것을 링킹(linking)이라 한다.  



### Linking 방법 

Linking 방법은 크게 2가지 방법으로 나뉜다. 

1. Static Linking
   - 파일 생성 시 라이브러리 내용을 포함해서 컴파일.
2. Dynamic Linking
   - 프로그램을 실행하는 중에 다른 목적 프로그램이 필요해졌을 때, 동적 링커(Dynamic Linker)에 의해 그 프로그램과 연결하는 것을 말한다.
   - 쉽게 말해서, 내 소스코드에 포함되지 않은 함수를 동적으로 참조할 수 있는 Linking 방법이다.  

### PLT (Procedure Linkage Table)

* PLT는 공유되는 외부 라이브러리를 참조할 때 사용하는 테이블이다.

* PLT에는 간접 분기문 코드가 포함되어 있어서 함수의 메모리 주소를 찾아갈 수 있다. 

* Symbol을 출력해보면, 외부 라이브러리 참조하는 함수명과 사용자가 만든 함수명이 다른 것을 확인할 수 있다.

  ![image](https://user-images.githubusercontent.com/12456375/41820870-75e64142-7813-11e8-9988-962304befc3d.png)




### GOT(Global Offset Table)

- GOT는 실제 라이브러리의 주소를 포함하고 있는 Table이며, PLT에 의해 참조된다.




### PLT&GOT를 사용한 함수 호출 과정 (최초 함수 호출 과정)

![image](https://user-images.githubusercontent.com/12456375/41505996-53518cb4-7204-11e8-9756-284ed8b1369a.png)

1. plt에서 간접 분기 코드 수행 (got로 jump하는 코드가 포함됨.)
2. got에서 _dl_runtime_resolve를 실행하며 dynamic linker에  삽입
3. 호출하는 함수를 SYMTAB(Symbol Table : 전역함수 및 extern 함수들의 주소가 적혀있는 Table) 현재 메모리 위치를 탐색
4. 호출하는 함수의 메모리 위치를 got에 기록
5. 함수 호출 



### PLT&GOT를 사용한 함수 호출 과정 (2번째 함수 호출 과정)

![image](https://user-images.githubusercontent.com/12456375/41506006-8765efa4-7204-11e8-9a1d-40fe3d20d128.png)

1. plt에서 간접 분기문 코드가 실행되어 got로 이동
2. got에 저장된 실제 함수 주소를 참조
3. 실제 함수 호출 





  @ 포스팅 내용 참고 주소
  - http://shayete.tistory.com/entry/4-Return-to-Library-RTL (정리가 잘 되어 있는 게시물입니다.)


  @ 위 내용은 다른 개발자분들의 블로그를 참고하여 정리한 내용입니다. 
  혹시나 원본 정보의 출처를 누락되었거나 제 블로그에 게시되길 원치 않으시면 아래 메일로 연락 부탁드리겠습니다.
  littleprince0717@gmail.com 